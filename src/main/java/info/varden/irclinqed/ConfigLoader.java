/*
   Copyright 2014 Marius Lindvall

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/

package info.varden.irclinqed;

import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.Map;
import java.util.Properties;

public class ConfigLoader {
	private IRCLinqed il;
	private Properties config;
	
	public ConfigLoader(IRCLinqed il) {
		this.il = il;
	}
	
	public void loadConfig() {
		config = new Properties();
		FileInputStream fis = null;
		try {
			fis = new FileInputStream(Util.getConfigFile());
			config.load(fis);
		} catch (FileNotFoundException e) {
			il.logWarning("Config file not found");
		} catch (IOException e) {
			il.logSevere("Failed to read config file!");
			e.printStackTrace();
		} finally {
			try {
				if (fis != null) {
					fis.close();
				}
			} catch (IOException e) {
				e.printStackTrace();
			}
		}
	}
	
	public void saveConfig() {
		FileOutputStream fos = null;
		try {
			if (!Util.getConfigFile().getParentFile().exists()) {
				Util.getConfigFile().getParentFile().mkdirs();
			}
			if (!Util.getConfigFile().exists()) {
				Util.getConfigFile().createNewFile();
			}
			fos = new FileOutputStream(Util.getConfigFile());
			config.store(fos, "Please do not edit this file manually.");
		} catch (FileNotFoundException e) {
			il.logSevere("Config file not found while saving");
			e.printStackTrace();
		} catch (IOException e) {
			il.logSevere("Failed to save config file!");
			e.printStackTrace();
		} finally {
			try {
				if (fos != null) {
					fos.close();
				}
			} catch (IOException e) {
				e.printStackTrace();
			}
		}
	}
	
	public String getKey(String key, String defaultValue) {
		return config.getProperty(key, defaultValue);
	}
	
	public Object setKey(String key, String value) {
		Object prev = config.setProperty(key, value);
		saveConfig();
		return prev;
	}
	
	public String getServerSpecificKey(String host, int port, String key) {
		return getServerSpecificKey(host, port, key, getDefaultKeyFactoryFallback(key), true);
	}
	
	public String getServerSpecificKey(String host, int port, String key, String defaultValue) {
		return getServerSpecificKey(host, port, key, defaultValue, true);
	}
	
	public String getServerSpecificKey(String host, int port, String key, String defaultValue, boolean fallback) {
		return getKey("server_" + host + ":" + port + "_" + key, (fallback ? getDefaultKey(key, defaultValue) : defaultValue));
	}
	
	public Object setServerSpecificKey(String host, int port, String key, String value) {
		return setKey("server_" + host + ":" + port + "_" + key, value);
	}
	
	public String getDefaultKey(String key, String defaultValue) {
		return getKey("default_" + key, defaultValue);
	}
	
	public Object setDefaultKey(String key, String value) {
		return setKey("default_" + key, value);
	}
	
	public Object removeKey(String key) {
		Object prev = config.remove(key);
		saveConfig();
		return prev;
	}
	
	public Object removeDefault(String key) {
		return removeKey("default_" + key);
	}
	
	public Object removeServerSpecificKey(String host, int port, String key) {
		return removeKey("server_" + host + ":" + port + "_" + key);
	}
	
	public Map<String, Object> removeAllServerSpecificKeys(String host, int port) {
		Map<String, Object> values = new HashMap<String, Object>();
		String[] keys = getAllServerKeys(host, port);
		for (String key : keys) {
			values.put(key, removeServerSpecificKey(host, port, key));
		}
		return values;
	}
	
	public String getFactorySetting(String key) {
		if ("username".equals(key)) {
			return "%player%";
		} else if (Setting.NICKNAME.equals(key)) {
			return "IRCLinqed user";
		} else if (Setting.REALNAME.equals(key)) {
			return "IRCLinqed - ingame Minecraft IRC client - http://bit.ly/irclinqed";
		} else if (Setting.PART_REASON.equals(key)) {
			return "Leaving";
		} else if (Setting.SHOW_MOTD.equals(key)) {
			return "false";
		} else if (Setting.SHOW_CTCP.equals(key)) {
			return "true";
		} else if (Setting.SHOW_FORMATTING.equals(key)) {
			return "true";
		} else if (Setting.SHOW_MODE.equals(key)) {
			return "true";
		} else if (Setting.SHOW_NICKNAME_PREFIX.equals(key)) {
			return "true";
		} else if (Setting.ALLOW_DCC.equals(key)) {
			return "false";
		} else if (Setting.SEND_DEATH_MESSAGES.equals(key)) {
			return "false";
		} else if (Setting.SEND_ACHIEVEMENT_MESSAGES.equals(key)) {
			return "false";
		} else if (Setting.SEND_ALL_MESSAGES.equals(key)) {
			return "false";
		}
		return "";
	}
	
	public String getDefaultKeyFactoryFallback(String key) {
		return getDefaultKey(key, getFactorySetting(key));
	}
	
	public String getKeyWithFallback(String key) {
		return getDefaultKey(key, getFactorySetting(key));
	}
	
	public String[] getAllServerKeys(String host, int port) {
		ArrayList<String> keys = new ArrayList<String>();
		Enumeration<Object> em = this.config.keys();
		String prefix = "server_" + host + ":" + port + "_";
		while (em.hasMoreElements()) {
			String key = (String) em.nextElement();
			if (key.startsWith(prefix)) {
				keys.add(key.substring(prefix.length()));
			}
		}
		return keys.toArray(new String[0]);
	}
	
	public String getOnOffDefault(String key, String server) {
		if (server == null) {
			String value = getDefaultKey(key, "default");
			if ("true".equals(value)) {
				return "§aON";
			} else if ("false".equals(value)) {
				return "§cOFF";
			} else {
				value = getFactorySetting(key);
				if ("true".equals(value)) {
					return "§7Default (§aON§7)";
				} else if ("false".equals(value)) {
					return "§7Default (§cOFF§7)";
				} else {
					return "§7Default";
				}
			}
		} else {
			String host = Util.getHost(server);
			int port = Util.getPort(server);
			String value = getServerSpecificKey(host, port, key, "default", false);
			if ("true".equals(value)) {
				return "§aON";
			} else if ("false".equals(value)) {
				return "§cOFF";
			} else {
				value = getDefaultKeyFactoryFallback(key);
				if ("true".equals(value)) {
					return "§7Default (§aON§7)";
				} else if ("false".equals(value)) {
					return "§7Default (§cOFF§7)";
				} else {
					value = getFactorySetting(key);
					if ("true".equals(value)) {
						return "§7Default (§aON§7)";
					} else if ("false".equals(value)) {
						return "§7Default (§cOFF§7)";
					} else {
						return "§7Default";
					}
				}
			}
		}
	}
	
	public boolean getBooleanKey(String key) {
		String value = getDefaultKeyFactoryFallback(key);
		if ("true".equals(value)) {
			return true;
		} else if ("false".equals(value)) {
			return false;
		} else {
			value = getFactorySetting(key);
			if ("true".equals(value)) {
				return true;
			} else if ("false".equals(value)) {
				return false;
			} else {
				return false;
			}
		}
	}
	
	public boolean getServerSpecificBooleanKey(String key, String host, int port) {
		String value = getServerSpecificKey(host, port, key, "default", false);
		if ("true".equals(value)) {
			return true;
		} else if ("false".equals(value)) {
			return false;
		} else {
			return getBooleanKey(key);
		}
	}
}
